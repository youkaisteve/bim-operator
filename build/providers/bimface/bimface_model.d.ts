import { IBim3DModel, IMarker, IBimCustom, IDispose } from '../../interface';
import BimfaceBase from './bimface_base';
import ViewPoint from '../../model/view_point';
import Floor from '../../model/floor';
import { IsolateOption, Bim3DEvent } from '../../enums';
import { ComponentFilter } from '../../model/filter';
import { HighlightOption } from '../../model';
declare const MARKER_FIELD: unique symbol;
export default class Bimface3DModel extends BimfaceBase implements IBim3DModel, IBimCustom, IDispose {
    viewer3D: any;
    [MARKER_FIELD]: IMarker;
    get marker(): IMarker;
    addEventListener(eventName: Bim3DEvent, callback: Function): void;
    load(options: any): Promise<void>;
    getFloors(): Promise<Floor[]>;
    getFloorsbyFileId(fileId: String): Promise<Array<Floor>>;
    explosionFloor(floorIds: String[], extend: Number): void;
    getComponentByCondition(fileId: String, conditions: Array<ComponentFilter>): Promise<String[]>;
    getViewPoint(options: any): Promise<ViewPoint>;
    setViewPoint(viewPoint: ViewPoint): void;
    isolateComponent(componentIds: String[], option: IsolateOption): void;
    isolateComponentByCondition(conditions: Array<ComponentFilter>, option: IsolateOption): void;
    clearIsolation(): void;
    highlightComponents(componentIds: String[], options: HighlightOption): void;
    clearHighlightComponents(componentIds?: String[]): void;
    selectComponents(componentIds: String[]): void;
    selectComponentsByCondition(conditions: Array<ComponentFilter>): void;
    clearSelectedComponents(): void;
    getSelectedComponents(): any;
    resize(width?: number, height?: number): void;
    dispose(options: any): void;
}
export {};
